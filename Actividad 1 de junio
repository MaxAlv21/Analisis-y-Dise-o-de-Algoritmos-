#include <stdio.h>

void asignarMemoria(int blockSize[], int m, int processSize[], int n) {
    // Ordenar los bloques de memoria en orden ascendente
    for (int i = 0; i < m - 1; i++) {
        for (int j = 0; j < m - i - 1; j++) {
            if (blockSize[j] > blockSize[j + 1]) {
                int temp = blockSize[j];
                blockSize[j] = blockSize[j + 1];
                blockSize[j + 1] = temp;
            }
        }
    }

    int asignaciones[n]; // Lista de asignaciones de memoria
    int huecos = 0; // Contador de huecos de espacio libre

    // Asignar memoria a los procesos
    for (int i = 0; i < n; i++) {
        asignaciones[i] = -1; // Inicializar como no asignado

        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                // Asignar el bloque al proceso
                asignaciones[i] = j;

                // Actualizar el tamaño del bloque asignado
                blockSize[j] -= processSize[i];

                // Si el bloque se ha asignado completamente, eliminarlo
                if (blockSize[j] == 0) {
                    for (int k = j; k < m - 1; k++) {
                        blockSize[k] = blockSize[k + 1];
                    }
                    m--;
                }

                break;
            }
        }
    }

    // Contar el número de huecos de espacio libre
    for (int i = 0; i < m; i++) {
        if (blockSize[i] > 0) {
            huecos++;
        }
    }

    // Imprimir asignaciones y número de huecos de espacio libre
    printf("Asignaciones de memoria:\n");
    for (int i = 0; i < n; i++) {
        if (asignaciones[i] != -1) {
            printf("Proceso %d asignado al bloque %d\n", i, asignaciones[i]);
        } else {
            printf("Proceso %d no asignado\n", i);
        }
    }
    printf("Número de huecos de espacio libre: %d\n", huecos);
}

int main() {
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int m = sizeof(blockSize) / sizeof(blockSize[0]);
    int n = sizeof(processSize) / sizeof(processSize[0]);

    asignarMemoria(blockSize, m, processSize, n);

    return 0;
}
